{"version":3,"sources":["images/andrzej-kryszpiniuk.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84bb2735.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/andrzej-kryszpiniuk.8702cb14.jpg\";","import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string,\n  correct_answer: string,\n  difficulty: string,\n  incorrect_answers: string[],\n  question: string,\n  type: string\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => (\n      {\n        ...question,\n        answers: shuffleArray([ ...question.incorrect_answers, question.correct_answer ])\n      }\n  ))\n}","export const shuffleArray = (array: any[]) =>\n    [ ...array ].sort(() => Math.random() - 0.5);","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px; \n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  \n  p {\n    font-size: 1rem;\n  }\n`\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  \n  :hover {\n    opacity: 0.8;\n  }\n  \n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n    correct \n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\" \n        : !correct && userClicked\n            ? \"linear-gradient(90deg, #ff5656, #c16868)\"\n            : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n  \n`","import React from \"react\";\n// Types\nimport { AnswerObject } from \"../App\";\n// Styles\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNr, totalQuestions }) => (\n    <Wrapper>\n      <p className=\"number\">Question: {questionNr} / {totalQuestions}</p>\n      <p dangerouslySetInnerHTML={{ __html: question }}/>\n      <div>\n        {answers.map(answer => (\n            <ButtonWrapper\n                key={answer}\n                correct={userAnswer?.correctAnswer === answer}\n                userClicked={userAnswer?.answer === answer}\n            >\n              <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                <span dangerouslySetInnerHTML={{ __html: answer }}/>\n              </button>\n            </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n)\n\nexport default QuestionCard;","import styled, { createGlobalStyle } from \"styled-components\";\n//@ts-ignore\nimport BGImage from \"./images/andrzej-kryszpiniuk.jpg\"\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  \n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  \n  * {\n    box-sizing: border-box;\n    font-family: \"Catamaran\", sans-serif;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  > p {\n    color: #fff;\n  }\n  \n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  \n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\", sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent; \n    filter: drop-shadow(2px 2px #008583);\n   font-size: 70px;\n   font-weight: 400;\n   text-align: center;\n   margin: 20px;\n  }\n  \n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  \n  .start {\n    max-width: 200px;\n   }\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from \"./API\";\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n// Types\nimport { QuestionState, Difficulty } from \"./API\"\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string,\n  answer: string,\n  correct: boolean,\n  correctAnswer: string\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [ loading, setLoading ] = useState(false);\n  const [ questions, setQuestions ] = useState<QuestionState[]>([]);\n  const [ number, setNumber ] = useState(0);\n  const [ userAnswers, setUserAnswers ] = useState<AnswerObject[]>([]);\n  const [ score, setScore ] = useState(0);\n  const [ gameOver, setGameOver ] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score is answer is correct\n      if (correct) setScore(prev => prev + 1)\n      //Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n\n      setUserAnswers(prev => [ ...prev, answerObject ]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n      <>\n        <GlobalStyle/>\n        <Wrapper>\n          <h1>REACT QUIZ</h1>\n          {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n              <button className=\"start\" onClick={startTrivia}>Start</button>) : null}\n          {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n          {loading && <p>Loading Questions ...</p>}\n          {!loading && !gameOver && (\n              <QuestionCard\n                  questionNr={number + 1}\n                  totalQuestions={TOTAL_QUESTIONS}\n                  question={questions[number].question}\n                  answers={questions[number].answers}\n                  userAnswer={userAnswers ? userAnswers[number] : undefined}\n                  callback={checkAnswer}\n              />\n          )}\n          {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n              <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n          ) : null}\n        </Wrapper>\n      </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}